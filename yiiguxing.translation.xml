<application>
  <component name="AppStorage">
    <histories>
      <item value="Supports sharing settings between installations of IntelliJ Platform based products used by the same developer (or team) on different computers. Synchronization is performed automatically after successful completion of &quot;Update Project&quot; or &quot;Push&quot; actions. Also you can do sync using VCS -&gt; Sync Settings. See the Share settings through a settings repository for more info." />
      <item value="Supports sharing settings between installations of IntelliJ Platform based products used by the same developer (or team) on different computers.&#10;Synchronization is performed automatically after successful completion of &quot;Update Project&quot; or &quot;Push&quot; actions. Also you can do sync using VCS -&gt; Sync Settings.&#10;See the Share settings through a settings repository for more info." />
      <item value="Synchronizes settings across all IDE installations. To sync, log in with your JetBrains Account (JBA). Settings synced are: UI and editor themes, keymaps, enabled and disabled plugins." />
      <item value="批量" />
      <item value="采购组织" />
      <item value="销售" />
      <item value="compact" />
      <item value="semaphore" />
      <item value="when the number of threads is greater than      *        the core, this is the maximum time that excess idle threads      *        will wait for new tasks before terminating." />
      <item value="SECONDS" />
      <item value="Returns the approximate number of threads that are actively executing tasks." />
      <item value="executing tasks." />
      <item value="MINUTES" />
      <item value="SSL certificate problem: self signed certificate" />
      <item value="unable to access" />
      <item value="商城" />
      <item value="项目交接" />
      <item value="interrupted" />
      <item value="indicate successor's thread needs unparking" />
      <item value="SIGNAL" />
      <item value="should Park After Failed Acquire" />
      <item value="park And Check Interrupt" />
      <item value="and write." />
      <item value="Queries whether any threads have been waiting to acquire longer * than the current thread." />
      <item value="has Queued Predecessors" />
      <item value="prev" />
      <item value="SHARED" />
      <item value="try Acquire" />
      <item value="Illegal Monitor State Exception" />
      <item value="Read fields in reverse initialization order   " />
      <item value="The correctness of this depends on head being initialized before tail and on head.next being accurate if the current thread is first in queue." />
      <item value="thread is first in queue." />
      <item value="try Acquire Shared" />
      <item value="release" />
      <item value="previous" />
      <item value="acquire Queued" />
      <item value="Interrupt" />
      <item value="acquire" />
      <item value="EXCLUSIVE" />
      <item value="Waiter" />
      <item value="add Waiter" />
      <item value="self Interrupt" />
      <item value="Main exported methods" />
      <item value="compare" />
      <item value="Unsafe" />
      <item value="compare And Set State" />
      <item value="Variant of set() to establish initialValue. Used instead * of set() in case user has overridden the set() method. *" />
      <item value="set Initial Value" />
      <item value="GC overhead limit exceeded" />
      <item value="inheritable Thread Locals" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="212" />
        <entry key="ENGLISH" value="212" />
        <entry key="DANISH" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="LITHUANIAN" value="2" />
        <entry key="SWEDISH" value="1" />
        <entry key="UZBEK" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
</application>